@page "/Books/Create"

@inject AuthorService AuthorService
@inject BookService BookService
@inject NavigationManager NavigationManager

<div class="container">
    <h1>
        @string.Format(Resources.Format_Add, Resources.Book)
    </h1>
    <div class="clearfix"></div>
    <EditForm Model="@CreateBookRequest" OnValidSubmit="@AddNewBook">
        <ValidationSummary />
        <PeterLeslieMorris.Blazor.Validation.Validate />

        <FieldEditorFor @bind-Value="CreateBookRequest.Title">
            <Field><RadzenTextBox @bind-Value="CreateBookRequest.Title"></RadzenTextBox></Field>
        </FieldEditorFor>
        <FieldEditorFor @bind-Value="CreateBookRequest.AlternativeTitle">
            <Field><RadzenTextBox @bind-Value="CreateBookRequest.AlternativeTitle"></RadzenTextBox></Field>
        </FieldEditorFor>
        <FieldEditorFor @bind-Value="CreateBookRequest.Author">
            <Field><RadzenDropDown @bind-Value="CreateBookRequest.AuthorId" AllowClear="true" Data=@AvailableAuthors ValueProperty="Id" TextProperty="FullName" Change=@(args => OnChange(args, CreateBookRequest.Author)) FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true" /></Field>
        </FieldEditorFor>
        <FieldEditorFor @bind-Value="CreateBookRequest.Genres">
            <Field><RadzenDropDown @bind-Value="@SelectedGenres" TextProperty="Code" ValueProperty="Id" Data=@AvailableGenres Multiple="true" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Change=@(args => OnChangeGenre(args)) /></Field>
        </FieldEditorFor>
        <FieldEditorFor @bind-Value="CreateBookRequest.Isbn">
            <Field><RadzenTextBox @bind-Value="CreateBookRequest.Isbn"></RadzenTextBox></Field>
        </FieldEditorFor>
        <div class="btn-group float-right" role="group">
            <button class="btn btn-danger" type="button" @onclick="GoBack">@Resources.Action_Cancel</button>
            <button class="btn btn-primary" type="submit">@Resources.Action_Save</button>
        </div>
    </EditForm>
</div>

@code {
    private CreateBookViewModel CreateBookRequest = new CreateBookViewModel();
    private List<Author> Authors = new List<Author>();
    private List<AuthorDropDownRequest> AvailableAuthors = new List<AuthorDropDownRequest>();
    private IEnumerable<BookGenre> AvailableGenres = new List<BookGenre>();
    private IEnumerable<Guid> SelectedGenres = new List<Guid>();

    protected override void OnInitialized()
    {
        Authors = AuthorService.GetAllAuthors().ToList();
        AvailableAuthors.AddRange(Authors.Select(au => new AuthorDropDownRequest(au)));
        AvailableGenres = BookService.GetAllGenres().ToList();
    }

    void GoBack()
    {
        NavigationManager.NavigateTo("Books");
    }

    void AddNewBook()
    {
        var newBookId = BookService.CreateBook(CreateBookRequest);

        NavigationManager.NavigateTo($"Books/Read/{newBookId}");
    }


    void OnChange(object value, Author author)
    {
        Guid? id = (Guid?)value;
        if (id.HasValue && id != Guid.Empty)
        {
            CreateBookRequest.Author = Authors.Single(_ => _.Id == id.Value);
        }
        return;
    }

    void OnChangeGenre(object value)
    {
        IList<Guid> ids = ((IEnumerable<Guid>)value)?.ToList();
        if (ids != null && ids.Any())
        {
            CreateBookRequest.Genres = AvailableGenres.Where(_ => ids.Contains(_.Id)).ToList();
            SelectedGenres = CreateBookRequest.Genres.Select(_ => _.Id);
        }
        else
        {
            CreateBookRequest.Genres.Clear();
        }
        return;
    }
}
