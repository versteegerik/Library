@page "/Books"

@inject BookService BookService
@inject PersonBookService PersonBookService
@inject NavigationManager NavigationManager

<div class="container">
    <h1>
        @Resources.Books
        <div class="btn-group float-right" role="group">
            <button class="btn btn-primary" type="button" @onclick="AddNewBook">@string.Format(Resources.Format_Add, Resources.Book)</button>
        </div>
        <div class="clearfix"></div>
    </h1>
    <hr />
    <DataTable @ref="BookDataTable" FetchData="@GetBooks">
        <SearchArea>
            <EditForm Model="@SearchBookRequest" OnValidSubmit="@Search">
                <FieldEditorFor @bind-Value="SearchBookRequest.Title">
                    <Field><RadzenTextBox @bind-Value="SearchBookRequest.Title"></RadzenTextBox></Field>
                </FieldEditorFor>
                <FieldEditorFor @bind-Value="SearchBookRequest.Author">
                    <Field><RadzenTextBox @bind-Value="SearchBookRequest.Author"></RadzenTextBox></Field>
                </FieldEditorFor>
                <div class="btn-group float-right">
                    <button class="btn btn-primary" type="submit">@Resources.Action_Search</button>
                </div>
            </EditForm>
        </SearchArea>
        <TableHeader>
            <th>@Resources.Book_Title</th>
            <th>@Resources.Book_Author</th>
            <th></th>
        </TableHeader>
        <TableRow Context="book">
            <td><NavLink href="@($"Books/Read/{book.Id}")">@book.Title</NavLink></td>
            <td>@book.Author.FullName()</td>
            <td>
                @if (PersonBookService.HasAsOwnedBooks(book))
                {
                    <div>In bezit</div>
                }
                else
                {
                    <div class="btn-group"><button class="btn btn-info" type="button" @onclick="async () => await PersonBookService.AddToOwnedBooks(book)">Voeg Toe</button></div>
                }
            </td>
        </TableRow>
    </DataTable>
</div>

@code {
    private SearchBookRequest SearchBookRequest = new SearchBookRequest();
    private DataTable<Book> BookDataTable { get; set; } = new DataTable<Book>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await BookDataTable.SelectPage(0);
        }
    }

    private DataTableResult<Book> GetBooks()
    {
        return new DataTableResult<Book>(BookDataTable.CallNumber, BookService.GetAllBooks(SearchBookRequest), BookDataTable.CurrentPage, BookDataTable.PageSize);
    }

    private void Search()
    {
        GetBooks();
    }

    private void AddNewBook()
    {
        NavigationManager.NavigateTo("Books/Create");
    }
}
