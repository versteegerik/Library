@page "/Books/Update/{BookId:guid}"

@inject AuthorService AuthorService
@inject BookService BookService
@inject NavigationManager NavigationManager

<div class="container">
    <h1>
        @string.Format(Resources.Format_Add, Resources.Book)
    </h1>
    @if (UpdateBookRequest != null)
    {
        <EditForm Model="@UpdateBookRequest" OnValidSubmit="@UpdateBook">
            <ValidationSummary />
            <PeterLeslieMorris.Blazor.Validation.Validate />

            <FieldEditorForString @bind-Value="UpdateBookRequest.Title"></FieldEditorForString>
            <FieldEditorForString @bind-Value="UpdateBookRequest.AlternativeTitle"></FieldEditorForString>
            <FieldEditorFor @bind-Value="UpdateBookRequest.Author">
                <Field><RadzenDropDown @bind-Value="UpdateBookRequest.AuthorId" Data=@AvailableAuthors  AllowClear="true" TextProperty="FullName" ValueProperty="Id" Change=@(args => OnChange(args, UpdateBookRequest.Author)) FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true" /></Field>
            </FieldEditorFor>
            <FieldEditorFor @bind-Value="UpdateBookRequest.Genres">
                <Field><RadzenDropDown @bind-Value="@SelectedGenres" TextProperty="Code" ValueProperty="Id" Data=@AvailableGenres  Multiple="true" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"Change=@(args => OnChangeGenre(args)) /></Field>
            </FieldEditorFor>
            <FieldEditorForString @bind-Value="UpdateBookRequest.Isbn"></FieldEditorForString>
            <FieldEditorForBoolean @bind-Value="UpdateBookRequest.IsBookGroup"></FieldEditorForBoolean>
            <div class="btn-group float-right" role="group">
                <button class="btn btn-danger" type="button" @onclick="CancelUpdateBook">@Resources.Action_Cancel</button>
                <button class="btn btn-primary" type="submit">@Resources.Action_Save</button>
            </div>
        </EditForm>
    }
</div>

@code {
    [Parameter] public Guid BookId { get; set; }
    private UpdateBookViewModel UpdateBookRequest;
    private Book Book { get; set; }
    private List<Author> Authors = new List<Author>();
    private List<AuthorDropDownRequest> AvailableAuthors = new List<AuthorDropDownRequest>();
    private IEnumerable<BookGenre> AvailableGenres = new List<BookGenre>();
    private IEnumerable<Guid> SelectedGenres = new List<Guid>();

    protected override void OnInitialized()
    {
        Book = BookService.GetBookById(BookId);
        SelectedGenres = Book.Genres.Select(_ => _.Id);
        AvailableGenres = BookService.GetAllGenres().ToList();
        Authors = AuthorService.GetAllAuthors().ToList();
        AvailableAuthors.AddRange(Authors.Select(au => new AuthorDropDownRequest(au)));

        UpdateBookRequest = new UpdateBookViewModel(Book);
    }

    void CancelUpdateBook()
    {
        NavigationManager.NavigateTo($"Books/Read/{BookId}");
    }

    void UpdateBook()
    {
        BookService.UpdateBook(UpdateBookRequest);

        CancelUpdateBook();
    }

    void OnChange(object value, Author author)
    {
        Guid? id = (Guid?)value;
        if (id.HasValue && id != Guid.Empty)
        {
            UpdateBookRequest.Author = Authors.Single(_ => _.Id == id.Value);
        }
        return;
    }

    void OnChangeGenre(object value)
    {
        IList<Guid> ids = ((IEnumerable<Guid>)value)?.ToList();
        if (ids != null && ids.Any())
        {
            UpdateBookRequest.Genres = AvailableGenres.Where(_ => ids.Contains(_.Id)).ToList();
            SelectedGenres = UpdateBookRequest.Genres.Select(_ => _.Id);
        }
        else
        {
            UpdateBookRequest.Genres.Clear();
        }
        return;
    }
}
